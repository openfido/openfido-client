name: Deploy Main
on: 
  push:
    branches:
      - master
jobs:
    test-build:
        runs-on: ubuntu-latest
        environment: test
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v3

          - name: Install Node
            uses: actions/setup-node@v3
            with:
              node-version: '16.11.1'

            # Cache action set to cache npm installed modules when package-lock or OS changes, otherwise will restore the cache
          - name: Cache node modules
            uses: actions/cache@v3
            env:
              cache-name: cache-node-modules
            with:
              # npm cache files are stored in `~/.npm` on Linux/macOS
              path: ~/.npm
              key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
              restore-keys: |
                ${{ runner.os }}-build-${{ env.cache-name }}-
                ${{ runner.os }}-build-
                ${{ runner.os }}-

          - name: Install Dependencies
            run: npm install

          - name: Build
            run: |
                npm run build

          - name: Move Build to tmp
            run: |
                mkdir -p /tmp/workspace/build
                mv -v build/* /tmp/workspace/build

          - name: Temporarily save Build to artifacts
            uses: actions/upload-artifact@v2
            with:
              name: build-client
              path: /tmp/workspace
# Needs to update everything below here
# Needs to setup an actions environment
  deploy:
    docker:
      - image: cimg/base:stable
    parameters:
      access-key:
        type: env_var_name
        default: STAGE_ACCESS_KEY_ID
      secret-key:
        type: env_var_name
        default: STAGE_SECRET_ACCESS_KEY
      s3-bucket:
        type: string
        default: $STAGE_S3_URL
      cf-id:
        type: string
        default: $STAGE_CF_ID
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - aws-cli/setup:
          aws-access-key-id: << parameters.access-key >>
          aws-secret-access-key: << parameters.secret-key >>
          aws-region: AWS_REGION
          version: "2"
      - run:
          name: Deploy to S3
          command: aws s3 sync /tmp/workspace/build/ s3://<< parameters.s3-bucket >>
      - run:
          name: Run CF invalidation
          command: aws cloudfront create-invalidation --distribution-id << parameters.cf-id >> --paths '/*'
# Necessary action when needing to use AWS credentials.
#          - name: Configure AWS Credentials
#            uses: aws-actions/configure-aws-credentials@v1
#            with:
#              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#              aws-region: us-west-1